@page
@model CarModel
@{
    ViewData["Title"] = "Araç Yönetimi";
    Layout = "_Layout";
}



<!-- Navigation -->
<nav class="modern-nav">
    <div class="nav-container">
        <div class="nav-brand">
            <div class="brand-icon">
                <i class="bi bi-speedometer2"></i>
            </div>
            <h1>Araç Yönetimi</h1>
        </div>
        <ul class="nav-links">
            <li>
                <a href="/Roads" class="nav-link">
                    <i class="fas fa-road"></i>
                    <span>Yollar</span>
                </a>
            </li>
            <li>
                <a href="/Car" class="nav-link active">
                    <i class="fas fa-car"></i>
                    <span>Araçlar</span>
                </a>
            </li>
        </ul>
        <div style="display: flex; gap: 1rem; align-items: center;">
            <!-- Auto Update Toggle -->
            <div class="auto-update-control">
                <label class="toggle-switch">
                    <input type="checkbox" id="autoUpdateToggle" checked>
                    <span class="toggle-slider"></span>
                </label>
                <span class="toggle-label">Otomatik Güncelleme</span> 
                <div class="update-status" id="updateStatus">
                    <i class="bi bi-circle-fill text-success"></i>
                    <span>Aktif</span>
                </div>
            </div>
            <button class="btn-add-road" data-bs-toggle="modal" data-bs-target="#addCarModal">
                <i class="bi bi-plus-circle"></i>
                Araç Ekle
            </button>
        </div>
    </div>
</nav>

<!-- Main Container -->
<div class="main-container">
    <!-- Statistics Grid -->
    <div class="statistics-grid">
        <div class="stat-card stat-success">
            <div class="stat-icon">
                <i class="bi bi-car-front-fill"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number" id="totalCarsCount">@(Model.Cars?.Count() ?? 0)</div>
                <div class="stat-label">Toplam Araç</div>
            </div>
            <div class="stat-trend">
                <i class="bi bi-arrow-up"></i>
            </div>
        </div>

        <div class="stat-card stat-info">
            <div class="stat-icon">
                <i class="bi bi-geo-alt-fill"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number" id="activeRoadsCount">@(Model.Cars?.Where(c => c.RoadId != null).Select(c => c.RoadId).Distinct().Count() ?? 0)</div>
                <div class="stat-label">Aktif Yol</div>
            </div>
            <div class="stat-trend">
                <i class="bi bi-arrow-up"></i>
            </div>
        </div>

        <div class="stat-card stat-warning">
            <div class="stat-icon">
                <i class="bi bi-exclamation-triangle-fill"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number" id="unassignedCarsCount">@(Model.Cars?.Where(c => c.RoadId == null).Count() ?? 0)</div>
                <div class="stat-label">Atanmamış Araç</div>
            </div>
            <div class="stat-trend">
                <i class="bi bi-dash"></i>
            </div>
        </div>

        <div class="stat-card stat-danger">
            <div class="stat-icon">
                <i class="bi bi-shield-exclamation"></i>
            </div>
            <div class="stat-content">
                <div class="stat-number">0</div>
                <div class="stat-label">Uyarı</div>
            </div>
            <div class="stat-trend">
                <i class="bi bi-check"></i>
            </div>
        </div>
    </div>

    <!-- Filters Section -->
    <div class="glass-card" style="padding: 1.5rem; margin-bottom: 2rem;">
        <div class="section-header">
            <h2 class="section-title">
                <i class="bi bi-funnel"></i>
                Filtreler
            </h2>
        </div>

        <div style="display: grid; grid-template-columns: 1fr 1fr; gap: 1.5rem; align-items: end;">
            <div class="form-group">
                <label class="form-label">
                    <i class="bi bi-search"></i>
                    Araç Kimlik Numarası Ara
                </label>
                <input type="text" class="modern-select" id="searchVehicle" placeholder="Araç kimlik numarası girin..." style="padding: 0.75rem;" />
            </div>

            <div class="form-group">
                <label class="form-label">
                    <i class="bi bi-geo-alt"></i>
                    Yol Filtresi
                </label>
                <select class="modern-select" id="filterRoadId">
                    <option value="">Tüm Yollar</option>
                    @if (Model.Cars != null)
                    {
                        @foreach (var road in Model.Cars
                       .Where(c => c.RoadId != null)
                       .Select(c => new { c.RoadId })
                       .Distinct()
                       .OrderBy(r => r.RoadId))
                        {
                            <option value="@road.RoadId">Yol @road.RoadId</option>
                        }
                    }
                </select>
            </div>
        </div>
    </div>

    <!-- Vehicle List Section -->
    <div class="glass-card" style="padding: 2rem;">
        <div class="section-header">
            <h2 class="section-title">
                <i class="bi bi-list-ul"></i>
                Araç Listesi
              @*   <div class="last-update-info" id="lastUpdateInfo">
                    <small>Son güncelleme: <span id="lastUpdateTime">Şimdi</span></small>
                </div> *@
            </h2>
            <div class="legend">
                <div class="legend-item">
                    <span class="legend-dot legend-success"></span>
                    Aktif
                </div>
                <div class="legend-item">
                    <span class="legend-dot legend-warning"></span>
                    Beklemede
                </div>
                <div class="legend-item">
                    <span class="legend-dot legend-danger"></span>
                    Uyarı
                </div>
            </div>
        </div>

        @if (Model.Cars != null && Model.Cars.Any())
        {
            <div class="vehicle-grid" id="vehicleGrid">
                @foreach (var car in Model.Cars.OrderBy(c => c.VehicleNumber))
                {
                    <div class="vehicle-card glass-card" id="carRow-@car.Id" data-roadid="@car.RoadId" style="position: relative; overflow: hidden;">
                        <div class="vehicle-header">
                            <div class="vehicle-icon">
                                <i class="bi bi-car-front-fill"></i>
                            </div>
                            <div class="vehicle-info">
                                <div class="vehicle-id">
                                    <span id="vehicleText-@car.Id">@car.VehicleNumber</span>
                                    <input type="text" class="modern-select d-none" id="vehicleInput-@car.Id" value="@car.VehicleNumber" style="margin: 0; padding: 0.5rem;" />
                                </div>
                                <div class="vehicle-road">
                                    <i class="bi bi-geo-alt"></i>
                                    <span id="roadText-@car.Id">@(car.RoadId != null ? $"Yol {car.RoadId}" : "Atanmamış")</span>
                                    <input type="text" class="modern-select d-none" id="roadInput-@car.Id" value="@car.RoadId" style="margin: 0; padding: 0.5rem;" />
                                </div>
                            </div>
                            <div class="vehicle-status">
                                <div class="status-dot @(car.RoadId != null ? "dot-success" : "dot-warning")" id="statusDot-@car.Id"></div>
                            </div>
                        </div>

                        <div class="vehicle-actions">
                            <button class="action-btn edit-btn" onclick="enableEdit(@car.Id)" title="Düzenle">
                                <i class="bi bi-pencil-square"></i>
                            </button>
                            <button class="action-btn save-btn d-none" id="saveBtn-@car.Id" onclick="saveEdit(@car.Id)" title="Kaydet">
                                <i class="bi bi-check-circle"></i>
                            </button>
                            <button class="action-btn delete-btn" onclick="deleteCar(@car.Id)" title="Sil">
                                <i class="bi bi-trash"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
        else
        {
            <div class="no-roads-message" id="noVehiclesMessage">
                <i class="bi bi-car-front" style="font-size: 3rem; margin-bottom: 1rem; opacity: 0.5;"></i>
                <div>Kayıtlı araç bulunmamaktadır</div>
                <div style="font-size: 0.9rem; margin-top: 0.5rem;">Yeni araç eklemek için yukarıdaki butonu kullanın</div>
            </div>
        }
    </div>
</div>

<!-- Add Car Modal -->
<div class="modal fade" id="addCarModal" tabindex="-1" aria-labelledby="addCarModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content modern-modal">
            <div class="modal-header modern-modal-header">
                <h5 class="modal-title modern-modal-title" id="addCarModalLabel">
                    <i class="bi bi-plus-circle"></i>
                    Yeni Araç Ekle
                </h5>
                <button type="button" class="btn-close modern-btn-close" data-bs-dismiss="modal" aria-label="Close">
                    <i class="bi bi-x"></i>
                </button>
            </div>
            <div class="modal-body modern-modal-body">
                <form id="addCarForm">
                    <div class="form-group">
                        <label for="roadId" class="form-label">
                            <i class="bi bi-geo-alt"></i>
                            Yol ID
                        </label>
                        <input type="number" class="form-control modern-select" id="roadId" required min="1" placeholder="Yol numarası girin" />
                    </div>
                    <div class="form-group">
                        <label for="vehicleIdentityNumber" class="form-label">
                            <i class="bi bi-card-text"></i>
                            Araç Kimlik Numarası
                        </label>
                        <input type="text" class="form-control modern-select" id="vehicleIdentityNumber" required maxlength="50" placeholder="Araç kimlik numarası girin" />
                    </div>
                </form>
            </div>
            <div class="modal-footer form-actions">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">İptal</button>
                <button type="button" class="btn btn-primary" id="saveCarBtn">
                    <i class="bi bi-check-circle"></i>
                    Kaydet
                </button>
            </div>
        </div>
    </div>
</div>



<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    let autoUpdateInterval = null;
    let lastVehicleData = new Map();
    let isAutoUpdateEnabled = true;

    // Başlangıçta mevcut araç verilerini sakla
    function initializeVehicleData() {
        document.querySelectorAll('.vehicle-card').forEach(card => {
            const cardId = card.id.replace('carRow-', '');
            const roadId = card.getAttribute('data-roadid');
            const vehicleNumber = card.querySelector('.vehicle-id span').textContent;

            lastVehicleData.set(cardId, {
                roadId: roadId,
                vehicleNumber: vehicleNumber
            });
        });
    }

    // Otomatik güncelleme fonksiyonu
       async function updateVehicleData() {
        if (!isAutoUpdateEnabled) return;

        try {
            const response = await fetch('https://localhost:7277/api/Cars');
            if (!response.ok) {
                throw new Error('API isteği başarısız');
            }

            const result = await response.json();
            const cars = result.car;

            if (!Array.isArray(cars)) {
                throw new Error('API yanıtı geçersiz: car alanı bir dizi değil');
            }

            updateVehicleCards(cars);
            updateStatistics(cars);
            updateFilters(cars);
            updateLastUpdateTime();
            showUpdateStatus('success');

        } catch (error) {
            console.error('Araç verileri güncellenirken hata:', error);
            showUpdateStatus('error');
        }
    }


    // Araç kartlarını güncelle
    function updateVehicleCards(cars) {
        const vehicleGrid = document.getElementById('vehicleGrid');
        const noVehiclesMessage = document.getElementById('noVehiclesMessage');

        if (!cars || cars.length === 0) {
            if (vehicleGrid) vehicleGrid.style.display = 'none';
            if (noVehiclesMessage) noVehiclesMessage.style.display = 'block';
            return;
        }

        if (noVehiclesMessage) noVehiclesMessage.style.display = 'none';
        if (vehicleGrid) vehicleGrid.style.display = 'grid';

        // Mevcut kartları güncelle veya yeni kartlar ekle
        cars.forEach(car => {
            const existingCard = document.getElementById(`carRow-${car.id}`);

            if (existingCard) {
                // Mevcut kartı güncelle
                updateExistingCard(existingCard, car);
            } else {
                // Yeni kart ekle
                addNewVehicleCard(car);
            }
        });

        // Silinmiş araçların kartlarını kaldır
        document.querySelectorAll('.vehicle-card').forEach(card => {
            const cardId = card.id.replace('carRow-', '');
            const carExists = cars.some(car => car.id.toString() === cardId);

            if (!carExists) {
                card.remove();
                lastVehicleData.delete(cardId);
            }
        });
    }

    // Mevcut kartı güncelle
    function updateExistingCard(card, carData) {
        const cardId = carData.id.toString();
        const lastData = lastVehicleData.get(cardId);

        let hasChanges = false;

        // Yol ID'sini güncelle
        if (lastData && lastData.roadId !== (carData.roadId?.toString() || null)) {
            const roadText = card.querySelector(`#roadText-${cardId}`);
            const roadInput = card.querySelector(`#roadInput-${cardId}`);
            const statusDot = card.querySelector(`#statusDot-${cardId}`);

            if (roadText) {
                roadText.textContent = carData.roadId ? `Yol ${carData.roadId}` : 'Atanmamış';
            }
            if (roadInput) {
                roadInput.value = carData.roadId || '';
            }
            if (statusDot) {
                statusDot.className = `status-dot ${carData.roadId ? 'dot-success' : 'dot-warning'}`;
            }

            card.setAttribute('data-roadid', carData.roadId || '');
            hasChanges = true;
        }

        // Araç numarasını güncelle
        if (lastData && lastData.vehicleNumber !== carData.vehicleNumber) {
            const vehicleText = card.querySelector(`#vehicleText-${cardId}`);
            const vehicleInput = card.querySelector(`#vehicleInput-${cardId}`);

            if (vehicleText) {
                vehicleText.textContent = carData.vehicleNumber;
            }
            if (vehicleInput) {
                vehicleInput.value = carData.vehicleNumber;
            }
            hasChanges = true;
        }

        // Değişiklik varsa animasyon göster
        if (hasChanges) {
            card.classList.add('changed');
            setTimeout(() => {
                card.classList.remove('changed');
            }, 600);
        }

        // Son veriyi güncelle
        lastVehicleData.set(cardId, {
            roadId: carData.roadId?.toString() || null,
            vehicleNumber: carData.vehicleNumber
        });
    }

    // Yeni araç kartı ekle
    function addNewVehicleCard(carData) {
        const vehicleGrid = document.getElementById('vehicleGrid');
        if (!vehicleGrid) return;

        const cardHtml = `
            <div class="vehicle-card glass-card" id="carRow-${carData.id}" data-roadid="${carData.roadId || ''}" style="position: relative; overflow: hidden;">
                <div class="vehicle-header">
                    <div class="vehicle-icon">
                        <i class="bi bi-car-front-fill"></i>
                    </div>
                    <div class="vehicle-info">
                        <div class="vehicle-id">
                            <span id="vehicleText-${carData.id}">${carData.vehicleNumber}</span>
                            <input type="text" class="modern-select d-none" id="vehicleInput-${carData.id}" value="${carData.vehicleNumber}" style="margin: 0; padding: 0.5rem;" />
                        </div>
                        <div class="vehicle-road">
                            <i class="bi bi-geo-alt"></i>
                            <span id="roadText-${carData.id}">${carData.roadId ? `Yol ${carData.roadId}` : 'Atanmamış'}</span>
                            <input type="text" class="modern-select d-none" id="roadInput-${carData.id}" value="${carData.roadId || ''}" style="margin: 0; padding: 0.5rem;" />
                        </div>
                    </div>
                    <div class="vehicle-status">
                        <div class="status-dot ${carData.roadId ? 'dot-success' : 'dot-warning'}" id="statusDot-${carData.id}"></div>
                    </div>
                </div>
                <div class="vehicle-actions">
                    <button class="action-btn edit-btn" onclick="enableEdit(${carData.id})" title="Düzenle">
                        <i class="bi bi-pencil-square"></i>
                    </button>
                    <button class="action-btn save-btn d-none" id="saveBtn-${carData.id}" onclick="saveEdit(${carData.id})" title="Kaydet">
                        <i class="bi bi-check-circle"></i>
                    </button>
                    <button class="action-btn delete-btn" onclick="deleteCar(${carData.id})" title="Sil">
                        <i class="bi bi-trash"></i>
                    </button>
                </div>
            </div>
        `;

        vehicleGrid.insertAdjacentHTML('beforeend', cardHtml);

        // Yeni veriyi sakla
        lastVehicleData.set(carData.id.toString(), {
            roadId: carData.roadId?.toString() || null,
            vehicleNumber: carData.vehicleNumber
        });

        // Yeni kart animasyonu
        const newCard = document.getElementById(`carRow-${carData.id}`);
        if (newCard) {
            newCard.classList.add('changed');
            setTimeout(() => {
                newCard.classList.remove('changed');
            }, 600);
        }
    }

    // İstatistikleri güncelle
    function updateStatistics(cars) {
        const totalCarsCount = document.getElementById('totalCarsCount');
        const activeRoadsCount = document.getElementById('activeRoadsCount');
        const unassignedCarsCount = document.getElementById('unassignedCarsCount');

        if (totalCarsCount) {
            totalCarsCount.textContent = cars.length;
        }

        if (activeRoadsCount) {
            const uniqueRoads = new Set(cars.filter(c => c.roadId).map(c => c.roadId));
            activeRoadsCount.textContent = uniqueRoads.size;
        }

        if (unassignedCarsCount) {
            const unassigned = cars.filter(c => !c.roadId).length;
            unassignedCarsCount.textContent = unassigned;
        }
    }

    // Filtreleri güncelle
    function updateFilters(cars) {
        const filterRoadId = document.getElementById('filterRoadId');
        if (!filterRoadId) return;

        const currentValue = filterRoadId.value;
        const uniqueRoads = [...new Set(cars.filter(c => c.roadId).map(c => c.roadId))].sort((a, b) => a - b);

        // Filtreyi yeniden oluştur
        filterRoadId.innerHTML = '<option value="">Tüm Yollar</option>';
        uniqueRoads.forEach(roadId => {
            filterRoadId.innerHTML += `<option value="${roadId}">Yol ${roadId}</option>`;
        });

        // Önceki seçimi geri yükle
        filterRoadId.value = currentValue;
    }

    // Son güncelleme zamanını göster
    function updateLastUpdateTime() {
        const lastUpdateTime = document.getElementById('lastUpdateTime');
        if (lastUpdateTime) {
            const now = new Date();
            lastUpdateTime.textContent = now.toLocaleTimeString('tr-TR');
        }
    }

    // Güncelleme durumunu göster
    function showUpdateStatus(status) {
        const updateStatus = document.getElementById('updateStatus');
        if (!updateStatus) return;

        const icon = updateStatus.querySelector('i');
        const text = updateStatus.querySelector('span');

        if (status === 'success') {
            icon.className = 'bi bi-circle-fill text-success';
            text.textContent = 'Aktif';
        } else if (status === 'error') {
            icon.className = 'bi bi-circle-fill text-danger';
            text.textContent = 'Hata';
        } else {
            icon.className = 'bi bi-circle text-secondary';
            text.textContent = 'Durduruldu';
        }
    }

    // Otomatik güncellemeyi başlat
    function startAutoUpdate() {
        if (autoUpdateInterval) {
            clearInterval(autoUpdateInterval);
        }

        autoUpdateInterval = setInterval(updateVehicleData, 5000); // 5 saniye
        isAutoUpdateEnabled = true;
        showUpdateStatus('success');
    }

    // Otomatik güncellemeyi durdur
    function stopAutoUpdate() {
        if (autoUpdateInterval) {
            clearInterval(autoUpdateInterval);
            autoUpdateInterval = null;
        }
        isAutoUpdateEnabled = false;
        showUpdateStatus('stopped');
    }

    // Otomatik güncelleme toggle
    document.getElementById('autoUpdateToggle').addEventListener('change', function() {
        if (this.checked) {
            startAutoUpdate();
        } else {
            stopAutoUpdate();
        }
    });

    // Sayfa yüklendiğinde
    document.addEventListener('DOMContentLoaded', function() {
        initializeVehicleData();
        startAutoUpdate();
    });

    // Arama ve filtreleme
    document.getElementById('searchVehicle').addEventListener('input', filterCars);
    document.getElementById('filterRoadId').addEventListener('change', filterCars);

    function filterCars() {
        const keyword = document.getElementById('searchVehicle').value.toLowerCase();
        const roadFilter = document.getElementById('filterRoadId').value;

        document.querySelectorAll('.vehicle-card').forEach(card => {
            const vehicleText = card.querySelector('.vehicle-id span').textContent.toLowerCase();
            const roadId = card.getAttribute('data-roadid');

            const matchesKeyword = vehicleText.includes(keyword);
            const matchesRoad = !roadFilter || roadId === roadFilter;

            card.style.display = (matchesKeyword && matchesRoad) ? 'block' : 'none';
        });
    }

    // Ana kaydet butonu event listener'ı
    document.getElementById('saveCarBtn').addEventListener('click', function() {
        const form = document.getElementById('addCarForm');

        // Form validasyonu
        if (!form.checkValidity()) {
            form.reportValidity();
            return;
        }

        const roadId = document.getElementById('roadId').value;
        const vehicleIdentityNumber = document.getElementById('vehicleIdentityNumber').value;

        // Loading state
        const submitBtn = this;
        const originalContent = submitBtn.innerHTML;
        submitBtn.innerHTML = '<div class="spinner"></div> Kaydediliyor...';
        submitBtn.disabled = true;

        fetch('https://localhost:7277/api/Cars', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                roadId: parseInt(roadId),
                vehicleIdentitiyNumber: vehicleIdentityNumber
            })
        })
        .then(res => {
            if (res.ok) {
                // Modal'ı kapat
                const modal = bootstrap.Modal.getInstance(document.getElementById('addCarModal'));
                if (modal) modal.hide();

                Swal.fire({
                    title: 'Başarılı!',
                    text: 'Araç başarıyla eklendi.',
                    icon: 'success',
                    confirmButtonColor: '#4f6ef7',
                    background: 'rgba(30, 41, 59, 0.95)',
                    color: '#e0e7ff'
                }).then(() => {
                    // Otomatik güncelleme ile yeni veri gelecek
                    updateVehicleData();
                });
            } else {
                throw new Error('Araç eklenemedi');
            }
        })
        .catch(error => {
            Swal.fire({
                title: 'Hata!',
                text: error.message || 'Sunucuya bağlanılamadı.',
                icon: 'error',
                confirmButtonColor: '#dc2626',
                background: 'rgba(30, 41, 59, 0.95)',
                color: '#e0e7ff'
            });
        })
        .finally(() => {
            submitBtn.innerHTML = originalContent;
            submitBtn.disabled = false;
        });
    });

    // Form submit event'ini de handle et (Enter tuşu için)
    document.getElementById('addCarForm').addEventListener('submit', function(e) {
        e.preventDefault();
        document.getElementById('saveCarBtn').click();
    });

    // Modal açıldığında form alanlarını temizle ve odaklan
    document.getElementById('addCarModal').addEventListener('shown.bs.modal', function () {
        const roadIdInput = document.getElementById('roadId');
        const vehicleNumberInput = document.getElementById('vehicleIdentityNumber');

        // Form alanlarını temizle
        roadIdInput.value = '';
        vehicleNumberInput.value = '';

        // İlk alana odaklan
        setTimeout(() => {
            roadIdInput.focus();
        }, 100);
    });

    // Enter tuşu ile form gönderme
    document.getElementById('addCarModal').addEventListener('keydown', function(e) {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            document.getElementById('saveCarBtn').click();
        }
    });

    function enableEdit(id) {
        // Otomatik güncellemeyi geçici olarak durdur
        const wasAutoUpdateEnabled = isAutoUpdateEnabled;
        if (wasAutoUpdateEnabled) {
            stopAutoUpdate();
        }

        document.getElementById(`vehicleText-${id}`).classList.add('d-none');
        document.getElementById(`roadText-${id}`).classList.add('d-none');
        document.getElementById(`vehicleInput-${id}`).classList.remove('d-none');
        document.getElementById(`roadInput-${id}`).classList.remove('d-none');
        document.getElementById(`saveBtn-${id}`).classList.remove('d-none');

        // Hide edit button, show save button
        const editBtn = document.querySelector(`#carRow-${id} .edit-btn`);
        editBtn.style.display = 'none';

        // Düzenleme bittiğinde otomatik güncellemeyi yeniden başlat
        const saveBtn = document.getElementById(`saveBtn-${id}`);
        const originalSaveFunction = saveBtn.onclick;
        saveBtn.onclick = function() {
            originalSaveFunction.call(this);
            if (wasAutoUpdateEnabled) {
                setTimeout(() => {
                    startAutoUpdate();
                }, 1000);
            }
        };
    }

    function saveEdit(id) {
        const roadId = document.getElementById(`roadInput-${id}`).value;
        const vehicleIdentityNumber = document.getElementById(`vehicleInput-${id}`).value;

        const saveBtn = document.getElementById(`saveBtn-${id}`);
        const originalContent = saveBtn.innerHTML;
        saveBtn.innerHTML = '<div class="spinner"></div>';
        saveBtn.disabled = true;

        fetch('https://localhost:7277/api/Cars', {
            method: 'PUT',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({
                id: id.toString(),
                roadId: parseInt(roadId),
                vehicleIdentitiyNumber: vehicleIdentityNumber
            })
        })
        .then(res => {
            if (res.ok) {
                Swal.fire({
                    title: 'Güncellendi!',
                    text: 'Araç başarıyla güncellendi.',
                    icon: 'success',
                    confirmButtonColor: '#4f6ef7',
                    background: 'rgba(30, 41, 59, 0.95)',
                    color: '#e0e7ff'
                }).then(() => {
                    // Otomatik güncelleme ile yeni veri gelecek
                    updateVehicleData();
                });
            } else {
                throw new Error('Güncelleme başarısız');
            }
        })
        .catch(error => {
            Swal.fire({
                title: 'Hata!',
                text: error.message || 'Sunucu hatası.',
                icon: 'error',
                confirmButtonColor: '#dc2626',
                background: 'rgba(30, 41, 59, 0.95)',
                color: '#e0e7ff'
            });
        })
        .finally(() => {
            saveBtn.innerHTML = originalContent;
            saveBtn.disabled = false;
        });
    }

    function deleteCar(id) {
        Swal.fire({
            title: 'Emin misiniz?',
            text: "Bu aracı silmek istiyor musunuz?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonColor: '#dc2626',
            cancelButtonColor: '#6b7280',
            confirmButtonText: 'Evet, sil!',
            cancelButtonText: 'İptal',
            background: 'rgba(30, 41, 59, 0.95)',
            color: '#e0e7ff'
        }).then((result) => {
            if (result.isConfirmed) {
                fetch(`https://localhost:7277/api/Cars/${id}`, {
                    method: 'DELETE'
                })
                .then(res => {
                    if (res.ok) {
                        Swal.fire({
                            title: 'Silindi!',
                            text: 'Araç başarıyla silindi.',
                            icon: 'success',
                            confirmButtonColor: '#4f6ef7',
                            background: 'rgba(30, 41, 59, 0.95)',
                            color: '#e0e7ff'
                        }).then(() => {
                            // Otomatik güncelleme ile yeni veri gelecek
                            updateVehicleData();
                        });
                    } else {
                        throw new Error('Araç silinemedi');
                    }
                })
                .catch(error => {
                    Swal.fire({
                        title: 'Hata!',
                        text: error.message || 'Sunucuya ulaşılamadı.',
                        icon: 'error',
                        confirmButtonColor: '#dc2626',
                        background: 'rgba(30, 41, 59, 0.95)',
                        color: '#e0e7ff'
                    });
                });
            }
        });
    }

    // Grid layout adjustment on window resize
    window.addEventListener('resize', function() {
        // Trigger reflow for better responsive behavior
        const grid = document.getElementById('vehicleGrid');
        if (grid) {
            grid.style.display = 'none';
            grid.offsetHeight; // Trigger reflow
            grid.style.display = 'grid';
        }
    });

    // Sayfa kapatılırken otomatik güncellemeyi durdur
    window.addEventListener('beforeunload', function() {
        stopAutoUpdate();
    });

    // Sayfa gizlendiğinde otomatik güncellemeyi durdur, görünür olduğunda başlat
    document.addEventListener('visibilitychange', function() {
        if (document.hidden) {
            stopAutoUpdate();
        } else {
            const autoUpdateToggle = document.getElementById('autoUpdateToggle');
            if (autoUpdateToggle && autoUpdateToggle.checked) {
                startAutoUpdate();
            }
        }
    });
</script>